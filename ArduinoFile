#include <Servo.h>
int timex=4;
int l=25.7;
float pi=3.14159;
Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards
#include <Wire.h>

unsigned char ok_flag;
unsigned char fail_flag;

unsigned short lenth_val = 0;
unsigned char i2c_rx_buf[16];
unsigned char dirsend_flag=0;

int pos = 0;    // variable to store the servo position

void setup() {
  Serial.begin(115200); // attaches the servo on pin 9 to the servo object
  myservo.attach(9);
  Wire.begin(); 
//  Serial.begin(9600,SERIAL_8N1); 
  printf_begin();   
  
}

void loop() {
  for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    
    myservo.write(pos); 
    int x=ReadDistance();
//    Serial.print("The distance is: ");
//   Serial.print(x/10);
//   Serial.println(" cm");
//   Serial.print("The angle is: ");
//    Serial.println(pos);// tell servo to go to position in variable 'pos'
//    Serial.print("The y coordinate is: ");
//    Serial.println((x/10)*(sin((pos)*(pi/180))));
//     Serial.print("The x coordinate is: ");
//    Serial.println(((l/2)-((x/10)*cos((pos)*(pi/180)))));
Serial.print(((l/2)-((x/10)*cos((pos)*(pi/180)))));
Serial.print(",");
Serial.println((x/10)*(sin((pos)*(pi/180)))-3);
//Serial.print(((l/2)-((x/10)*cos(0.5*3.14))));
//Serial.print(",");
//Serial.println((x/10)*(sin((0.5*3.14))-2));
    
    delay(timex);                       // waits 15ms for the servo to reach the position
  }
  for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
     int x=ReadDistance();
//Serial.print("The distance is: ");
     
      
      
 
//   Serial.print(x/10);
//   Serial.println(" cm");
//   Serial.print("The angle is: ");
 
//    Serial.println(pos);// tell servo to go to position in variable 'pos'
//    Serial.print("The y coordinate is: ");
//    Serial.println((x/10)*(sin((pos)*(pi/180))));
//     Serial.print("The x coordinate is: ");
//    Serial.println(((l/2)-((x/10)*cos((pos)*(pi/180)))));
  Serial.print(((l/2)-((x/10)*cos((pos)*(pi/180)))));
  Serial.print(",");
   Serial.println((x/10)*(sin((pos)*(pi/180)))-3);
//Serial.print(((l/2)-((x/10)*cos(0.5*3.14))));
//Serial.print(",");
//Serial.println((x/10)*(sin((0.5*3.14))));
    
    delay(timex);                            // waits 15ms for the servo to reach the position
  }
}

int serial_putc( char c, struct __file * )
{
  Serial.write( c );
  return c;
}

void printf_begin(void)
{
  fdevopen( &serial_putc, 0 );
}



void SensorRead(unsigned char addr,unsigned char* datbuf,unsigned char cnt) 
{
  unsigned short result=0;
  // step 1: instruct sensor to read echoes
  Wire.beginTransmission(82); // transmit to device #82 (0x52)
  // the address specified in the datasheet is 164 (0xa4)
  // but i2c adressing uses the high 7 bits so it's 82
  Wire.write(byte(addr));      // sets distance data address (addr)
  Wire.endTransmission();      // stop transmitting
  // step 2: wait for readings to happen
  delay(1);                   // datasheet suggests at least 30uS
  // step 3: request reading from sensor
  Wire.requestFrom(82, cnt);    // request cnt bytes from slave device #82 (0x52)
  // step 5: receive reading from sensor
  if (cnt <= Wire.available()) { // if two bytes were received
    *datbuf++ = Wire.read();  // receive high byte (overwrites previous reading)
    *datbuf++ = Wire.read(); // receive low byte as lower 8 bits
  }
}

int ReadDistance(){
    SensorRead(0x00,i2c_rx_buf,2);
    lenth_val=i2c_rx_buf[0];
    lenth_val=lenth_val<<8;
    lenth_val|=i2c_rx_buf[1];
    delay(300); 
    return lenth_val;
}